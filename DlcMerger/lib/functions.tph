// Returns whether requested DLC exists in supported DLC search paths
DEFINE_ACTION_FUNCTION FIND_DLC_FILE
STR_VAR
  dlc_res = ~~  // DLC name without extension
RET
  found
BEGIN
  OUTER_SET found = 0
  ACTION_IF (NOT ~%dlc_res%~ STR_EQ ~~) BEGIN
    ACTION_FOR_EACH folder IN ~%USER_DIRECTORY%~ ~.~ ~dlc~ ~workshop~ BEGIN
      ACTION_IF (NOT found) BEGIN
        ACTION_IF (~%folder%~ STR_EQ ~workshop~) BEGIN
          OUTER_TEXT_SPRINT ext ~mod~
        END ELSE BEGIN
          OUTER_TEXT_SPRINT ext ~zip~
        END
        ACTION_IF (FILE_EXISTS ~%folder%/%dlc_res%.%ext%~) BEGIN
          OUTER_SET found = 1
        END
      END
    END
  END
END

// Returns whether specified DLC is a valid
DEFINE_ACTION_FUNCTION IS_DLC_VALID
STR_VAR
  path_dlc    = ~~    // full path to DLC archive
  path_unzip  = ~unzip~
RET
  success
BEGIN
  OUTER_SET success = 0

  ACTION_IF (NOT ~%path_dlc%~ STR_EQ ~~) BEGIN
    ACTION_IF (~%WEIDU_OS%~ STR_EQ ~win32~) BEGIN
      OUTER_TEXT_SPRINT null ~nul~
    END ELSE BEGIN
      OUTER_TEXT_SPRINT null ~/dev/null~
    END
    AT_NOW ret_val ~%unzip% -l "%path_dlc%" mod.key >%null%~
    OUTER_SET success = (ret_val = 0) ? 1 : 0
  END
END

// Returns path information about requested DLC
DEFINE_ACTION_FUNCTION GET_DLC_INFO
STR_VAR
  dlc_res = ~~  // DLC name without extension
RET
  dlc_filespec  // full path of DLC
  dlc_directory // DLC path without filename
  dlc_ext       // DLC file extension
BEGIN
  OUTER_SET exists = 0
  ACTION_IF (FILE_EXISTS ~%USER_DIRECTORY%/%dlc_res%.zip~) BEGIN
    OUTER_SET exists = 1
    OUTER_TEXT_SPRINT dlc_ext ~zip~
    OUTER_TEXT_SPRINT dlc_directory ~%USER_DIRECTORY%~
  END ELSE ACTION_IF (FILE_EXISTS ~%dlc_res%.zip~) BEGIN
    OUTER_SET exists = 1
    OUTER_TEXT_SPRINT dlc_directory ~.~
    OUTER_TEXT_SPRINT dlc_ext ~zip~
  END ELSE ACTION_IF (FILE_EXISTS ~dlc/%dlc_res%.zip~) BEGIN
    OUTER_SET exists = 1
    OUTER_TEXT_SPRINT dlc_directory ~dlc~
    OUTER_TEXT_SPRINT dlc_ext ~zip~
  END ELSE ACTION_IF (FILE_EXISTS ~workshop/%dlc_res%.mod~) BEGIN
    OUTER_SET exists = 1
    OUTER_TEXT_SPRINT dlc_directory ~workshop~
    OUTER_TEXT_SPRINT dlc_ext ~mod~
  END

  ACTION_IF (exists) BEGIN
    OUTER_TEXT_SPRINT dlc_filespec ~%dlc_directory%/%dlc_res%.%dlc_ext%~
  END ELSE BEGIN
    OUTER_TEXT_SPRINT dlc_filespec ~~
    OUTER_TEXT_SPRINT dlc_directory ~~
    OUTER_TEXT_SPRINT dlc_ext ~~
  END
END

// Copies content of "source_dir" recursively to "dest_dir".
DEFINE_ACTION_FUNCTION COPY_RECURSIVE
INT_VAR
  delete      = 0  // whether to delete file after copy operation
STR_VAR
  source_dir  = ~~
  dest_dir    = ~~
  biff_folder = ~data~
BEGIN
  ACTION_IF (~%source_dir%~ STR_EQ ~~) BEGIN OUTER_TEXT_SPRINT source_dir ~.~ END
  ACTION_IF (~%dest_dir%~ STR_EQ ~~) BEGIN OUTER_TEXT_SPRINT dest_dir ~.~ END

  ACTION_IF (NOT ~%dest_dir%~ STR_EQ ~.~ && NOT DIRECTORY_EXISTS ~%dest_dir%~) BEGIN
    MKDIR ~%dest_dir%~
  END

  // scanning files
  ACTION_CLEAR_ARRAY ~files~
  GET_FILE_ARRAY files ~%source_dir%~ ~.+~
  ACTION_PHP_EACH files AS _ => file_path BEGIN
    LAF GET_PATH_CHILD STR_VAR path = EVAL ~%file_path%~ RET file_name = child END
    COPY_LARGE ~%source_dir%/%file_name%~ ~%dest_dir%/%file_name%~
    ACTION_IF (delete) BEGIN
      DELETE + ~%source_dir%/%file_name%~
    END
  END

  // scanning folders
  ACTION_CLEAR_ARRAY ~dirs~
  GET_DIRECTORY_ARRAY dirs ~%source_dir%~ ~.+~
  ACTION_PHP_EACH dirs AS _ => dir_path BEGIN
    LAF GET_PATH_CHILD STR_VAR path = EVAL ~%dir_path%~ RET dir_name = child END
    ACTION_IF (NOT ~%dir_name%~ STR_EQ ~.~ && NOT ~%dir_name%~ STR_EQ ~..~) BEGIN
      ACTION_IF (~%dir_name%~ STR_EQ ~data~) BEGIN
        OUTER_TEXT_SPRINT dest_dir_name ~%biff_folder%~
      END ELSE BEGIN
        OUTER_TEXT_SPRINT dest_dir_name ~%dir_name%~
      END
      LAF COPY_RECURSIVE
      INT_VAR
        delete
      STR_VAR
        source_dir = EVAL ~%source_dir%/%dir_name%~
        dest_dir   = EVAL ~%dest_dir%/%dest_dir_name%~
      END
    END
  END
END

// Returns the child element of the given path
DEFINE_ACTION_FUNCTION GET_PATH_CHILD
STR_VAR path = ~~
RET child
BEGIN
  OUTER_PATCH_SAVE child ~%path%~ BEGIN
    SET pos = RINDEX_BUFFER(~[\\/]~)
    PATCH_IF (pos >= 0) BEGIN
      DELETE_BYTES 0 (pos + 1)
    END
  END
END

// Replaces first folder with specified name.
DEFINE_PATCH_FUNCTION REPLACE_FOLDER_NAME
STR_VAR
  path        = ~~
  folder_name = ~~
RET new_path
BEGIN
  INNER_PATCH_SAVE new_path ~%path%~ BEGIN
    SET pos = INDEX_BUFFER(~[\\/]~)
    PATCH_IF (pos >= 0) BEGIN
      DELETE_BYTES 0 pos
    END ELSE BEGIN
      INSERT_BYTES 0 1
      WRITE_ASCII 0 ~/~ (1)
    END
    SET len = STRING_LENGTH ~%folder_name%~
    INSERT_BYTES 0 len
    WRITE_ASCIIE 0 ~%folder_name%~ (len)
  END
END

DEFINE_ACTION_FUNCTION MERGE_KEYS
STR_VAR
  chitin_key  = ~~
  mod_key     = ~~
  biff_folder = ~data~
RET
  success
BEGIN
  OUTER_SET success = 0
  ACTION_IF (NOT ~%chitin_key%~ STR_EQ ~~ && NOT ~%mod_key%~ STR_EQ ~~ &&
             FILE_EXISTS ~%chitin_key%~ && FILE_EXISTS ~%mod_key%~) BEGIN
    OUTER_SET success = 1

    // Check if key merging is really needed
    OUTER_SET merge_keys = 1
    COPY - ~%mod_key%~ ~%mod_key%~
      READ_ASCII 0 sig (8)
      PATCH_IF (~%sig%~ STR_EQ ~KEY V1  ~) BEGIN
        READ_LONG 0x08 numBiff
        READ_LONG 0x0c numResref
        PATCH_IF (numBiff = 0 && numResref = 0) BEGIN
          SET merge_keys = 0
        END
      END

    ACTION_IF (merge_keys) BEGIN
      // preparing chitin.key data
      COPY - ~%chitin_key%~ ~%chitin_key%~
        READ_ASCII 0 sig (8)
        PATCH_IF (~%sig%~ STR_EQ ~KEY V1  ~) BEGIN
          READ_LONG 0x08 numBiff
          READ_LONG 0x0c numResref
          READ_LONG 0x10 ofsBiff
          READ_LONG 0x14 ofsResref
          SET chitin_biff = 0
          FOR (idx = 0; idx < numBiff; ++idx) BEGIN
            SET ofs = ofsBiff + (idx * 12)
            READ_ASCII ofs data (12)
            TEXT_SPRINT EVAL ~chitin_biff_%idx%~ ~%data%~
            READ_LONG (ofs + 4) ofsName
            READ_SHORT (ofs + 8) lenName
            READ_ASCII ofsName name (lenName - 1)
            INNER_PATCH_SAVE name ~%name%~ BEGIN REPLACE_TEXTUALLY ~\\~ ~/~ END
            TEXT_SPRINT EVAL ~chitin_biff_%idx%_name~ ~%name%~
            SET chitin_biff += 1
          END

          SET chitin_resref = 0
          FOR (idx = 0; idx < numResref; ++idx) BEGIN
            SET ofs = ofsResref + (idx * 14)
            READ_ASCII ofs data (14)
            TEXT_SPRINT EVAL ~chitin_resref_%idx%~ ~%data%~
            READ_ASCII ofs name (8) NULL
            TEXT_SPRINT EVAL ~chitin_resref_%idx%_name~ ~%name%~
            READ_SHORT (ofs + 8) type
            SET EVAL ~chitin_resref_%idx%_type~ = type
            READ_LONG (ofs + 10) locator
            SET EVAL ~chitin_resref_%idx%_locator~ = locator
            // mapping name+type to chitin_resref index to increase search performance
            TEXT_SPRINT name2 ~%name%~
            TO_UPPER ~name2~
            SET EVAL ~map_resref_%name2%_%type%~ = idx

            SET chitin_resref += 1
          END
        END ELSE BEGIN
          SET success = 0
        END
      BUT_ONLY

      ACTION_IF (success) BEGIN
        // preparing mod.key data
        COPY - ~%mod_key%~ ~%mod_key%~
          READ_ASCII 0 sig (8)
          PATCH_IF (~%sig%~ STR_EQ ~KEY V1  ~) BEGIN
            READ_LONG 0x08 numBiff
            READ_LONG 0x0c numResref
            READ_LONG 0x10 ofsBiff
            READ_LONG 0x14 ofsResref

            SET map_biff = 0    // maps mod.key biff indices to chitin.key biff indices
            FOR (idx = 0; idx < numBiff; ++idx) BEGIN
              SET ofs = ofsBiff + (idx * 12)
              READ_ASCII ofs data (12)
              READ_LONG (ofs + 4) ofsName
              READ_SHORT (ofs + 8) lenName
              READ_ASCII ofsName name (lenName - 1)
              INNER_PATCH_SAVE name ~%name%~ BEGIN REPLACE_TEXTUALLY ~\\~ ~/~ END
              LPF REPLACE_FOLDER_NAME STR_VAR path = EVAL ~%name%~ folder_name = EVAL ~%biff_folder%~ RET name = new_path END
              // adding mod biffs to chitin biff list
              SET EVAL ~map_biff_%idx%~ = chitin_biff
              TEXT_SPRINT EVAL ~chitin_biff_%chitin_biff%~ ~%data%~
              TEXT_SPRINT EVAL ~chitin_biff_%chitin_biff%_name~ ~%name%~
              SET chitin_biff += 1
            END

            // updating chitin resrefs with mod resrefs
            FOR (idx = 0; idx < numResref; ++idx) BEGIN
              SET ofs = ofsResref + (idx * 14)
              READ_ASCII ofs data (14)
              READ_ASCII ofs name (8) NULL
              READ_SHORT (ofs + 8) type
              READ_LONG (ofs + 10) locator
              SET biff_idx = (locator >> 20) & 0xfff
              SET biff_idx = EVAL ~map_biff_%biff_idx%~ & 0xfff
              SET locator = (locator & 0x000fffff) | (biff_idx << 20)
              INNER_PATCH_SAVE data ~%data%~ BEGIN WRITE_LONG 10 locator END

              TEXT_SPRINT name2 ~%name%~
              TO_UPPER ~name2~
              PATCH_IF (VARIABLE_IS_SET EVAL ~map_resref_%name2%_%type%~) BEGIN
                SET cidx = EVAL ~map_resref_%name2%_%type%~
                TEXT_SPRINT EVAL ~chitin_resref_%cidx%~ ~%data%~
                TEXT_SPRINT EVAL ~chitin_resref_%cidx%_name~ ~%name%~
                SET EVAL ~chitin_resref_%cidx%_type~ = type
                SET EVAL ~chitin_resref_%cidx%_locator~ = locator
              END ELSE BEGIN
                TEXT_SPRINT EVAL ~chitin_resref_%chitin_resref%~ ~%data%~
                TEXT_SPRINT EVAL ~chitin_resref_%chitin_resref%_name~ ~%name%~
                SET EVAL ~chitin_resref_%chitin_resref%_type~ = type
                SET EVAL ~chitin_resref_%chitin_resref%_locator~ = locator
                SET chitin_resref += 1
              END
            END
          END ELSE BEGIN
            SET success = 0
          END
        BUT_ONLY
      END

      ACTION_IF (success) BEGIN
        COPY ~chitin.key~ ~chitin.key~
          DELETE_BYTES 0x18 (BUFFER_LENGTH - 0x18)  // remove all biff and resref data

          // writing biff data
          SET numBiff = chitin_biff
          SET ofsBiff = 0x18
          SET ofsBiffNames = ofsBiff + (numBiff * 12)
          INSERT_BYTES ofsBiff (ofsBiffNames - ofsBiff)
          FOR (idx = 0; idx < numBiff; ++idx) BEGIN
            SET ofs = ofsBiff + (idx * 12)
            TEXT_SPRINT data EVAL ~%chitin_biff_%idx%%~
            TEXT_SPRINT name EVAL ~%chitin_biff_%idx%_name%~
            WRITE_ASCIIE ofs ~%data%~ (12)
            SET len = STRING_LENGTH ~%name%~ + 1
            INSERT_BYTES ofsBiffNames len
            WRITE_ASCIIE ofsBiffNames ~%name%~ (len)
            WRITE_LONG (ofs + 4) ofsBiffNames
            WRITE_SHORT (ofs + 8) len
            SET ofsBiffNames += len
          END

          // writing resref data
          SET numResref = chitin_resref
          SET ofsResref = ofsBiffNames
          INSERT_BYTES ofsResref (numResref * 14)
          FOR (idx = 0; idx < numResref; ++idx) BEGIN
            SET ofs = ofsResref + (idx * 14)
            TEXT_SPRINT data EVAL ~%chitin_resref_%idx%%~
            WRITE_ASCIIE ofs ~%data%~ (14)
          END

          // updating header
          WRITE_LONG 0x08 numBiff
          WRITE_LONG 0x0c numResref
          WRITE_LONG 0x10 ofsBiff
          WRITE_LONG 0x14 ofsResref
      END
    END
  END
END
